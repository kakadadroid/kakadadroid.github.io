[{"title": "Subtle bug coming from Rails' first_or_create", "timestamp": 1420453037, "modified": 1420453037, "filename": "9 Subtle bug coming from Rails' first_or_create", "content": "One very useful method provided by Rails is `[first_or_create](http://apidock.com/rails/v4.1.8/ActiveRecord/Relation/first_or_create)`\n\nBut there's a substantial probability that one might use it like this:\n````\nModel.first_or_create(x: 1, y: 2)\n````\nAt least I did at first. It caused a bug in that nothing ever gets created with `{x=1, y=2}`. This is because Model.first already returns an object - where(`id`=1) - so the create part doesn't get called.\n\nThe desired behaviour would be achieved by:\n````\nModel.where(x: 1, y: 2).first_or_create\n\n````", "post_id": "subtle-bug-coming-from-rails'-first_or_create"}, {"title": "Joining the Flappy craze", "timestamp": 1420452583, "modified": 1420452583, "filename": "2.flappy-quiz.md", "content": "**tl;dr**: my flappy clone [here](http://kakadadroid.github.io/flappy-quiz/).\n\nBeing swept by the recent craze for flappy bird, I wanted to pass on this little birdy frustration and at the same time make something fun. I love the fact that flappy bird is so frustratingly simple that to play you have to focus on some thing else other than the bird to do well. Some people suggesting looking at the skies behind. Some at the moving pipes. Others go further to add a [typing training in there](http://www.mrspeaker.net/dev/game/flappy/). \n\nOne interesting version I found was this awesome [flappy maths saga](tikwid/flappy-math-saga) which puts your multiplication power to the test. It's beautiful because the attention split needed there really proves as a good brain teaser. I thought this could extend to other fields as well, so I wanted to make a frustrating quiz engin for multiple choice questions. But the pipe is only so long, so only true/false type questions and 2-choices were possible. \n\nI told this to my girlfriend and she said her english class full of 13yo's will love it. We used google spreadsheet to compile a small quiz, which I was planning to hardcode into the modified html flappy. But while sharing the google spreadsheet I remembered that it could be made a public link, and so there should be a way to read the content of the public spreadsheet directly from the html.  \n\n>\"The (sec2) kids went bananas!\"\n\nTurns out google spreadsheet do have an API, but the documentation is scarce and full of redirects between a few versions. From [this example](https://developers.google.com/gdata/samples/spreadsheet_sample) I figured out how to read the columns of a public spreadsheet, and voila, flappy-quiz just got its sheety backend wired up.\n\n````javascript\n\t//load questions\n\t$.getJSON(\"http://cors.io/spreadsheets.google.com/feeds/list\n\t\t/[google-sheet-uid]/od6/public/basic?alt=json\", function(data) {\n    \tvar rows = data.feed.entry;\n    \tfor(var i=0; i<rows.length; i++) {\n        \tvar t = rows[i].content.$t.split(/[ ,]+/);\n        \tvar question = {word:rows[i].title.$t, correct:t[1], wrong:t[3]};\n        \tquestions.push(question);\n\t\t}\n\t\tisQuestionLoaded = true;\n\t});\n````\n\n\nNow anyone with the spreadsheet link(and with permission) can update it, and the flappy bird will have a different problem to solve to go through the pipes!\n\nSee it [flapping live here](http://kakadadroid.github.io/flappy-quiz/) and if you want to, [fork from here!](http://kakadadroid.github.io/flappy-quiz/)", "post_id": "joining-the-flappy-craze"}, {"title": "RegEx is fascinating", "timestamp": 1420452583, "modified": 1420452583, "filename": "7. RegEx is fascinating.md", "content": "A few different projects called for the use of regex and until now, I still let go of a smile in amazement as I construct each regex query.\n\nA online tool that is super useful is [Regex 101](http://regex101.com/), where different flavour of regex is accessible at a toggle. There is also an **Explanation** box that breaks down the qurey that I just constructed by trial and error.\n\nWhile it's extremely useful and fulfilling, I still could not find enough reason and opportunity to learn regex proper. Just like many other things.\n\n**A cool app idea:**  Take a test string, and the desired matching part, and outputs the regex expression.", "post_id": "regex-is-fascinating"}, {"title": "AWS Key and Secret with special characters", "timestamp": 1420452583, "modified": 1420452583, "filename": "8 AWS Key and Secret with special characters", "content": "When playing around with file uploads using the gem paperclip from a heroku rails app ([I did as described here](https://devcenter.heroku.com/articles/paperclip-s3)), I got it working from my local environment, successfully uploading images to my bucket. But upon pushing to heroku production, the key and secret seems to have issues and I was given this:\n\n````\nAWS::S3::Errors::SignatureDoesNotMatch (The request signature we calculated does not match the signature you provided. \n````\nI tripple checked that there were no difference in the config variables and inspected the configured AWS credentials on production and all seemed to tally up. \n\nThen I found [this post that gave me some direction](http://stackoverflow.com/questions/2777078/amazon-mws-request-signature-calculated-does-not-match-the-signature-provided). Many solved by the trailing slashs and encoding of \"+\" and stuff in the credentials. I went ahead to the AWS console and kept refreshing till I get an all alpha-numeric key and secret pair. I got it after about 5 rounds of create-and-delete cycles. Magically the upload succeeds at first try. \n\nI'll never be sure that it's heroku's environment messing up the encoding special characters, but now it works and I'll keep using the alpha-numeric-only key.", "post_id": "aws-key-and-secret-with-special-characters"}, {"title": "Rspec'ing a rials JSON Api", "timestamp": 1420452500, "modified": 1420452500, "filename": "3. Rspec'ing JSON Api", "content": "`render_view` was the missing piece: \nbecause rspec by default disables rendering of views to speed up the test. And that's how I was stuck for days trying to find bugs in the super short json.\n\n```ruby\n    describe Api::V1::TeamsController do\n\t\trender_views\n\t\tit \"returns a json array of teams\" do\n\t\t...\n        json = JSON.parse(response.body)\n        expect(json['teams']).not_to be_nil\n        end\n    end\n```", "post_id": "rspec'ing-a-rials-json-api"}, {"title": "Export resources for Android with AdobeScript", "timestamp": 1420452500, "modified": 1420452500, "filename": "4. Exporting resources.md", "content": "In my learning journey as an Android developer, one annoying task is to export a graphic resource multiple times for the handful of screen resolutions that I want to support: mdpi, hdpi, xhdpi and now xxhdpi. This task involves a repeated set of mouse clicks, a change in scaling value, and navigating to the right folders for the right dpi. It can get quite tedious, especially when I often have multiple images for one button, and a gazillion edits before I'm happy with how it looks.\n\nThis calls for some scripting for the awesomeness of automation. There's something magical about automatic processes that fascinates me. So I wrote [this Adobe Script in this gist,](https://gist.github.com/kakadadroid/8701058) which has saved myself uncountable mouse clicks and hair pullings.\n\nI remember clearly the joy of running the script and watching the res/drawable/ subfolders be populated with the awesome crisp graphics that I just made. Visually witnessing the .png's popping up is magical, but knowing that you've created that magic is even more... _\"magicaller\"_.\n\nI'll probably visit this again and add in the dimensions for iOS resources as well when I get my hands on a Mac and have some time to learn iOS too.", "post_id": "export-resources-for-android-with-adobescript"}, {"title": "End to end application: Follodota", "timestamp": 1420452500, "modified": 1420452500, "filename": "5 End to end application: Follodota.md", "content": "I've always wanted to build something related to DotA2, because it's such an awesome game and I've been spending at least 5 hours a week clicking away playing DotA. So for the past 3 weeks I've been working on a video aggregator app, [follodota](https://play.google.com/store/apps/details?id=com.follodota&hl=en), which consolidates the English commentated matches uploaded by joinDota and beyondTheSummit.\n\nThis is an end-to-end application that I built while learning on the job: a python script which crawls the dotacinema.com website for new content, a rails app as server hosted on Heroku to store and serve the match information with json api, and of course an android native app to play those videos.\n\nCurrently it is still in its infancy, and I still have to run the python script every now and then. The script only gets 15 entries because the [beautiful soup](http://www.crummy.com/software/BeautifulSoup/bs4/doc/) + [request](http://docs.python-requests.org/en/latest/) combo in python could not emulate a scrolling down event, which is needed to load more videos on [dotacinema.com](www.dotacinema.com/vod). Much more work to do :P\n\nBut for now, you can search the matches chronologically, by teams and by leagues (and easily by casters, but that's not implemented yet). My hope would be to get this thing ready for TI4!([last year's TI here](http://www.dota2.com/international/home/overview/))\n\n<ul class=\"todo\">Todo:\n<li class=\"todoitem\">add in some Gimmie awesomeness in gamification</li>\n<li class=\"todoitem\">an iOS client would be great too </li>\n<li class=\"todoitem\">and also to crawl for more matches. </li>\n</ul>\n\nMaybe a script to automatically run the crawling script (which automatically posts matches to through the api). autoception. hah.", "post_id": "end-to-end-application:-follodota"}, {"title": "2048 bot", "timestamp": 1420452500, "modified": 1420452500, "filename": "6 2048 bot.md", "content": "**Up-update:** I [forked the 2048 game](http://keang.me/2048) and added a looper feature, where anyone can create their stupid bot!\n\n**Update:** I stumbled upon this [super robust AI]( http://ov3y.github.io/2048-AI/) which solves the game! albiet with a bit of lag.\n\nIn the past 2 days my facebook newsfeed flooded with posts about a new game, [2048](http://gabrielecirulli.github.io/2048/) which itself is a clone from an existing game concept ([dejavu?](http://en.wikipedia.org/wiki/Flappy_Bird)).\n\nAfter playing with it for awhile I wanted to write an AI that solves the game, because this naturalI certainly can't solve this game! The first step I took was to simulate keypresses, which I did using a [js script here](https://gist.github.com/kakadadroid/9502722) in firebug console, so I didn't have to modify the game's code at all. At this point I still haven't read a single line of the source code. But all this does is either moving randomly, or moving in a fixed circular pattern.\n\nIt's a stupid bot that presses some keys for you, but it scores better than me! Will come back and work on a proper AI soon!", "post_id": "2048-bot"}, {"title": "blog commit -m \"init\"", "timestamp": 1420452500, "modified": 1420452500, "filename": "post-1.md", "content": "This is yet another blog that I shall promise myself to keep. This one will talk about the projects and cool and uncool things that I've done.\n\nI saw a friend's [super cool blog](http://yangshun.im/cs3216/#/) and after a few minutes of picking around I found his little python-based page generators for blogs, [luna](https://github.com/yangshun/luna). I just lost all the excuses to delay this. Mainly because I just wanted to try out this 'blogging engin'.\n\nSeems pretty cool! Because of this I had to install a LAMP stack and run on localhost to preview every edit, but it's a one time set up and now I can blog in markdown(for which I need to refer to [the cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)).\n\nLet's get some shit done!", "post_id": "blog-commit--m-\"init\""}]