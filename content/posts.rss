<?xml version="1.0" ?>
<rss type="dict">
	<channel type="list">
		<title>Luna Blogging Engine</title>
		<description>This is a demonstration of Luna Blogging Engine</description>
		<link>http://yangshun.github.io/luna/#/</link>
		<item type="dict">
			<description type="str">**tl;dr**: my flappy clone [here](http://kakadadroid.github.io/flappy-quiz/).

Being swept by the recent craze for flappy bird, I wanted to pass on this little birdy frustration and at the same time make something fun. I love the fact that flappy bird is so frustratingly simple that to play you have to focus on some thing else other than the bird to do well. Some people suggesting looking at the skies behind. Some at the moving pipes. Others go further to add a [typing training in there](http://www.mrspeaker.net/dev/game/flappy/). 

One interesting version I found was this awesome [flappy maths saga](tikwid/flappy-math-saga) which puts your multiplication power to the test. It's beautiful because the attention split needed there really proves as a good brain teaser. I thought this could extend to other fields as well, so I wanted to make a frustrating quiz engin for multiple choice questions. But the pipe is only so long, so only true/false type questions and 2-choices were possible. 

I told this to my girlfriend and she said her english class full of 13yo's will love it. We used google spreadsheet to compile a small quiz, which I was planning to hardcode into the modified html flappy. But while sharing the google spreadsheet I remembered that it could be made a public link, and so there should be a way to read the content of the public spreadsheet directly from the html.  

&gt;&quot;The (sec2) kids went bananas!&quot;

Turns out google spreadsheet do have an API, but the documentation is scarce and full of redirects between a few versions. From [this example](https://developers.google.com/gdata/samples/spreadsheet_sample) I figured out how to read the columns of a public spreadsheet, and voila, flappy-quiz just got its sheety backend wired up.

```javascript
	//load questions
	$.getJSON(&quot;http://cors.io/spreadsheets.google.com/feeds/list
		/[google-sheet-uid]/od6/public/basic?alt=json&quot;, function(data) {
    	var rows = data.feed.entry;
    	for(var i=0; i&lt;rows.length; i++) {
        	var t = rows[i].content.$t.split(/[ ,]+/);
        	var question = {word:rows[i].title.$t, correct:t[1], wrong:t[3]};
        	questions.push(question);
		}
		isQuestionLoaded = true;
	});
```


Now anyone with the spreadsheet link(and with permission) can update it, and the flappy bird will have a different problem to solve to go through the pipes!

See it [flapping live here](http://kakadadroid.github.io/flappy-quiz/) and if you want to, [fork from here!](http://kakadadroid.github.io/flappy-quiz/)</description>
			<pubDate type="str">2014-03-05</pubDate>
			<title type="str">Joining the Flappy craze</title>
			<link type="str">http://yangshun.github.io/luna/#/joining-the-flappy-craze</link>
			<guid type="str">joining-the-flappy-craze</guid>
		</item>
		<item type="dict">
			<description type="str">`render_view` was the missing piece: 
because rspec by default disables rendering of views to speed up the test. And that's how I was stuck for days trying to find bugs in the super short json.

```ruby
    describe Api::V1::TeamsController do
		render_views
		it &quot;returns a json array of teams&quot; do
		...
        json = JSON.parse(response.body)
        expect(json['teams']).not_to be_nil
        end
    end
```</description>
			<pubDate type="str">2014-03-04</pubDate>
			<title type="str">Rspec'ing a rials JSON Api</title>
			<link type="str">http://yangshun.github.io/luna/#/rspec'ing-a-rials-json-api</link>
			<guid type="str">rspec'ing-a-rials-json-api</guid>
		</item>
		<item type="dict">
			<description type="str">In my learning journey as an Android developer, one annoying task is to export a graphic resource multiple times for the handful of screen resolutions that I want to support: mdpi, hdpi, xhdpi and now xxhdpi. This task involves a repeated set of mouse clicks, a change in scaling value, and navigating to the right folders for the right dpi. It can get quite tedious, especially when I often have multiple images for one button, and a gazillion edits before I'm happy with how it looks.

This calls for some scripting for the awesomeness of automation. There's something magical about automatic processes that fascinates me. So I wrote [this Adobe Script in this gist,](https://gist.github.com/kakadadroid/8701058) which has saved myself uncountable mouse clicks and hair pullings.

I remember clearly the joy of running the script and watching the res/drawable/ subfolders be populated with the awesome crisp graphics that I just made. Visually witnessing the .png's popping up is magical, but knowing that you've created that magic is even more... _&quot;magicaller&quot;_.

I'll probably visit this again and add in the dimensions for iOS resources as well when I get my hands on a Mac and have some time to learn iOS too.</description>
			<pubDate type="str">2014-03-06</pubDate>
			<title type="str">Export resources for Android with AdobeScript</title>
			<link type="str">http://yangshun.github.io/luna/#/export-resources-for-android-with-adobescript</link>
			<guid type="str">export-resources-for-android-with-adobescript</guid>
		</item>
		<item type="dict">
			<description type="str">This is yet another blog that I shall promise myself to keep. This one will talk about the projects and cool and uncool things that I've done.

I saw a friend's [super cool blog](http://yangshun.im/cs3216/#/) and after a few minutes of picking around I found his little python-based page generators for blogs, [luna](https://github.com/yangshun/luna). I just lost all the excuses to delay this. Mainly because I just wanted to try out this 'blogging engin'.

Seems pretty cool! Because of this I had to install a LAMP stack and run on localhost to preview every edit, but it's a one time set up and now I can blog in markdown(for which I need to refer to [the cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)).

Let's get some shit done!</description>
			<pubDate type="str">2014-03-03</pubDate>
			<title type="str">blog commit -m &quot;init&quot;</title>
			<link type="str">http://yangshun.github.io/luna/#/blog-commit--m-&quot;init&quot;</link>
			<guid type="str">blog-commit--m-&quot;init&quot;</guid>
		</item>
	</channel>
</rss>
