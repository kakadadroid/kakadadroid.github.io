<?xml version="1.0" ?>
<rss type="dict">
	<channel type="list">
		<title>Luna Blogging Engine</title>
		<description>This is a demonstration of Luna Blogging Engine</description>
		<link>http://yangshun.github.io/luna/#/</link>
		<item type="dict">
			<description type="str">[deepo](http://www.deepo.io/) is upgrading our first minimal infrastructure.

###We've Been Lazy

We used to be on Postgresql(RDS) + Rails(Heroku) + Golang(Heroku). It was simple to start with, but grew to be come a sluggish patchwork. The traffic that we deal with isn't huge by any standard, but we attempted to count uniques on some largish tables. We added master-slave replica to separate the writes and reads, created composite indexes on the queried columns, partitioned the table by date range, have background jobs update a summary table out of a star schema, but still we get very slow response time on the unique count queries.

Yes there's [HyperLogLog](https://en.wikipedia.org/wiki/HyperLogLog), and we've realise we should tolerate the 2% error. But we learned that the hard way. By now our partitioned slave throws a timeout on simple select, once in a while. I suspect it is because of my tinkering with column constraints without properly handling existing violations. Or it could be that rails migration of databases don't play nicely with master-slave set up. I have to do the same query on the master instance to avoid a timeout.

On top of the intermitten query problems, there was a pending design issue. Our postgresql acted like a poor man's persistent message queue. We have a `pending_page_views` table from which rows are waiting to be processed, then removed and inserted into the `page_views` table. Those extra writes and reads that results from the clumsy pipeline probably doesn't help the responsiveness of the database. It got the job done, and there were no extra technology to integrate. Simply postgres and rails sidekiq. Simple is good right?

In retrospect, it was simple only in terms of coding it out, as we didn't have to climb the learning curve of any other tools. But we were still trying to implement the same thing: persistent buffer queue for data stream processing (we get the time the processing happens too, so we can redo some jobs or even replay the whole thing). The complexity of the process is **the same**. We were not simplifying things, we were just lazy (well, being lazy is only a negative expession of trying to build as
fast as possible with as little effort as possible, which is still a noble thing.)

###SQL vs NoSQL

Along the way a couple of different experienced opinions sugguested we utilize a nosql database to take care of one part of the app, where writes is intensive, and queries are never joined.

&quot;But, you mean I'll have to rewrite all my queries?!&quot; Yes.

Luckily for us, it wasn't that painful at all. The `pending_page_views` and `page_views` aren't really &quot;relational&quot; data anyway.
They are more like [log data](http://docs.mongodb.org/ecosystem/use-cases/storing-log-data/) (who visit what page at what time).

We then have have Postgresql(RDS) + Rails(EC2) + MongoDB(EC2) + Golang(EC2).

We keep app configurations that face client admins as relational data. Postgresql for relational data, MongoDB for non-relational data. Sounds good! Although the complexity is now increased.

###AMQP

I've heard about [rabbitmq](https://www.rabbitmq.com/) before, but didn't really understand why I need it. Because I didn't. I probably still don't understand it. But I try: you can make a pub/sub thing, so we can queue and distribute the processing of incoming data stream to multile workers. Should fit the bill for our batch jobs on `pending_page_view`. It's an easy-to-setup AMQP protocal that persists messages;
so if the server shuts down we can just restart and continue picking up jobs. (I finally understood [Apache Kafka](http://kafka.apache.org/) too)

So now: Postgresql(RDS) + Rails (EC2) + MongoDB(EC2) + Golang+Rabbitmq(EC2)

###We need to run Python

As we become more mature on our data-science department, it became a requirement that we are able to run python scripts. We need to recalculate similarity indexes every time a new item enters the pool, and we need to reweight our message distribution weights periodically; these should be threaded. I almost fell into the rabbit hole of trying to let python manage the multiple threads. Instead we restrict python codes to what it does best: data science heavy lifting, and leave the concurrency management to the best guy: [Golang](https://www.youtube.com/watch?v=f6kdp27TYZs)

Finally: Postgresql(RDS) + Rails (EC2) + MongoDB(EC2) + Golang+Rabbitmq+Python(EC2). Much complex! So effort!

###Work in Progress

Some decisions are probably not the best, and some obvious, but it's a starting point for me, questioning &quot;Is this the right tool for this job?&quot;; and everytime I've addressed that, I feel good.
Everyone should feel good, so everyone should ask that question.

However, the answer to &quot;is this the right tool for this job&quot; depends on what's available on your toolbelt.
I've got only a handful and some of them I probably have wrong understandings of (like [AMQP rabbitmq](#)), but I'll be trying to aquire and sharpen more tools.</description>
			<pubDate type="str">2015-07-09</pubDate>
			<title type="str">The right tool for the right job</title>
			<link type="str">http://yangshun.github.io/luna/#/the-right-tool-for-the-right-job</link>
			<guid type="str">the-right-tool-for-the-right-job</guid>
		</item>
		<item type="dict">
			<description type="str">**Up-update:** I [forked the 2048 game](http://www.keang.be/2048) and added a looper feature, where anyone can create their stupid bot!

**Update:** I stumbled upon this [super robust AI]( http://ov3y.github.io/2048-AI/) which solves the game! albiet with a bit of lag.

In the past 2 days my facebook newsfeed flooded with posts about a new game, [2048](http://gabrielecirulli.github.io/2048/) which itself is a clone from an existing game concept ([dejavu?](http://en.wikipedia.org/wiki/Flappy_Bird)).

After playing with it for awhile I wanted to write an AI that solves the game, because this naturalI certainly can't solve this game! The first step I took was to simulate keypresses, which I did using a [js script here](https://gist.github.com/keang/9502722) in firebug console, so I didn't have to modify the game's code at all. At this point I still haven't read a single line of the source code. But all this does is either moving randomly, or moving in a fixed circular pattern.

It's a stupid bot that presses some keys for you, but it scores better than me! Will come back and work on a proper AI soon!</description>
			<pubDate type="str">2014-03-16</pubDate>
			<title type="str">2048 bot</title>
			<link type="str">http://yangshun.github.io/luna/#/2048-bot</link>
			<guid type="str">2048-bot</guid>
		</item>
		<item type="dict">
			<description type="str">One very useful method provided by Rails is [`first_or_create`](http://apidock.com/rails/v4.1.8/ActiveRecord/Relation/first_or_create)

But there's a substantial probability that one might use it like this:
```
Model.first_or_create(x: 1, y: 2)
```
&lt;br&gt;
At least I did at first. It caused a bug in that nothing ever gets created with `{x=1, y=2}`. This is because Model.first already returns an object - where(`id`=1) - so the create part doesn't get called.

The desired behaviour would be achieved by:

```
Model.where(x: 1, y: 2).first_or_create
```</description>
			<pubDate type="str">2015-01-05</pubDate>
			<title type="str">Subtle bug coming from Rails' first_or_create</title>
			<link type="str">http://yangshun.github.io/luna/#/subtle-bug-coming-from-rails'-first_or_create</link>
			<guid type="str">subtle-bug-coming-from-rails'-first_or_create</guid>
		</item>
		<item type="dict">
			<description type="str">`render_view` was the missing piece:
because rspec by default disables rendering of views to speed up the test. And that's how I was stuck for days trying to find bugs in the super short json.

```ruby
    describe Api::V1::TeamsController do
		render_views
		it &quot;returns a json array of teams&quot; do
		...
        json = JSON.parse(response.body)
        expect(json['teams']).not_to be_nil
        end
    end
```</description>
			<pubDate type="str">2014-03-03</pubDate>
			<title type="str">Rspec'ing a rials JSON Api</title>
			<link type="str">http://yangshun.github.io/luna/#/rspec'ing-a-rials-json-api</link>
			<guid type="str">rspec'ing-a-rials-json-api</guid>
		</item>
		<item type="dict">
			<description type="str">When playing around with file uploads using the gem paperclip from a heroku rails app ([I did as described here](https://devcenter.heroku.com/articles/paperclip-s3)), I got it working from my local environment, successfully uploading images to my bucket. But upon pushing to heroku production, the key and secret seems to have issues and I was given this:

````
AWS::S3::Errors::SignatureDoesNotMatch (The request signature we calculated does not match the signature you provided.
````
I tripple checked that there were no difference in the config variables and inspected the configured AWS credentials on production and all seemed to tally up.

Then I found [this post that gave me some direction](http://stackoverflow.com/questions/2777078/amazon-mws-request-signature-calculated-does-not-match-the-signature-provided). Many solved by the trailing slashs and encoding of &quot;+&quot; and stuff in the credentials. I went ahead to the AWS console and kept refreshing till I get an all alpha-numeric key and secret pair. I got it after about 5 rounds of create-and-delete cycles. Magically the upload succeeds at first try.

I'll never be sure that it's heroku's environment messing up the encoding special characters, but now it works and I'll keep using the alpha-numeric-only key.</description>
			<pubDate type="str">2015-01-03</pubDate>
			<title type="str">AWS Key and Secret with special characters</title>
			<link type="str">http://yangshun.github.io/luna/#/aws-key-and-secret-with-special-characters</link>
			<guid type="str">aws-key-and-secret-with-special-characters</guid>
		</item>
		<item type="dict">
			<description type="str">In my learning journey as an Android developer, one annoying task is to export a graphic resource multiple times for the handful of screen resolutions that I want to support: mdpi, hdpi, xhdpi and now xxhdpi. This task involves a repeated set of mouse clicks, a change in scaling value, and navigating to the right folders for the right dpi. It can get quite tedious, especially when I often have multiple images for one button, and a gazillion edits before I'm happy with how it looks.

This calls for some scripting for the awesomeness of automation. There's something magical about automatic processes that fascinates me. So I wrote [this Adobe Script in this gist,](https://gist.github.com/keang/8701058) which has saved myself uncountable mouse clicks and hair pullings.

I remember clearly the joy of running the script and watching the res/drawable/ subfolders be populated with the awesome crisp graphics that I just made. Visually witnessing the .png's popping up is magical, but knowing that you've created that magic is even more... _&quot;magicaller&quot;_.

I'll probably visit this again and add in the dimensions for iOS resources as well when I get my hands on a Mac and have some time to learn iOS too.</description>
			<pubDate type="str">2014-03-06</pubDate>
			<title type="str">Export resources for Android with AdobeScript</title>
			<link type="str">http://yangshun.github.io/luna/#/export-resources-for-android-with-adobescript</link>
			<guid type="str">export-resources-for-android-with-adobescript</guid>
		</item>
		<item type="dict">
			<description type="str">I've always wanted to build something related to DotA2, because it's such an awesome game and I've been spending at least 5 hours a week clicking away playing DotA. So for the past 3 weeks I've been working on a video aggregator app, [follodota](https://play.google.com/store/apps/details?id=com.follodota&amp;hl=en), which consolidates the English commentated matches uploaded by joinDota and beyondTheSummit.

This is an end-to-end application that I built while learning on the job: a python script which crawls the dotacinema.com website for new content, a rails app as server hosted on Heroku to store and serve the match information with json api, and of course an android native app to play those videos.

Currently it is still in its infancy, and I still have to run the python script every now and then. The script only gets 15 entries because the [beautiful soup](http://www.crummy.com/software/BeautifulSoup/bs4/doc/) + [request](http://docs.python-requests.org/en/latest/) combo in python could not emulate a scrolling down event, which is needed to load more videos on [dotacinema.com](www.dotacinema.com/vod). Much more work to do :P

But for now, you can search the matches chronologically, by teams and by leagues (and easily by casters, but that's not implemented yet). My hope would be to get this thing ready for TI4!([last year's TI here](http://www.dota2.com/international/home/overview/))

&lt;ul class=&quot;todo&quot;&gt;Todo:
&lt;li class=&quot;todoitem&quot;&gt;add in some Gimmie awesomeness in gamification&lt;/li&gt;
&lt;li class=&quot;todoitem&quot;&gt;an iOS client would be great too &lt;/li&gt;
&lt;li class=&quot;todoitem&quot;&gt;and also to crawl for more matches. &lt;/li&gt;
&lt;/ul&gt;

Maybe a script to automatically run the crawling script (which automatically posts matches to through the api). autoception. hah.</description>
			<pubDate type="str">2014-03-13</pubDate>
			<title type="str">End to end application: Follodota</title>
			<link type="str">http://yangshun.github.io/luna/#/end-to-end-application:-follodota</link>
			<guid type="str">end-to-end-application:-follodota</guid>
		</item>
		<item type="dict">
			<description type="str">This is yet another blog that I shall promise myself to keep. This one will talk about the projects and cool and uncool things that I've done.

I saw a friend's [super cool blog](http://yangshun.im/cs3216/#/) and after a few minutes of picking around I found his little python-based page generators for blogs, [luna](https://github.com/yangshun/luna). I just lost all the excuses to delay this. Mainly because I just wanted to try out this 'blogging engin'.

Seems pretty cool! Because of this I had to install a LAMP stack and run on localhost to preview every edit, but it's a one time set up and now I can blog in markdown(for which I need to refer to [the cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)).

Let's get some shit done!</description>
			<pubDate type="str">2014-03-01</pubDate>
			<title type="str">blog commit -m &quot;init&quot;</title>
			<link type="str">http://yangshun.github.io/luna/#/blog-commit--m-&quot;init&quot;</link>
			<guid type="str">blog-commit--m-&quot;init&quot;</guid>
		</item>
		<item type="dict">
			<description type="str">A few different projects called for the use of regex and until now, I still let go of a smile in amazement as I construct each regex query.

A online tool that is super useful is [Regex 101](http://regex101.com/), where different flavour of regex is accessible at a toggle. There is also an **Explanation** box that breaks down the qurey that I just constructed by trial and error.

While it's extremely useful and fulfilling, I still could not find enough reason and opportunity to learn regex proper. Just like many other things.

**A cool app idea:**  Take a test string, and the desired matching part, and outputs the regex expression.</description>
			<pubDate type="str">2014-07-24</pubDate>
			<title type="str">RegEx is fascinating</title>
			<link type="str">http://yangshun.github.io/luna/#/regex-is-fascinating</link>
			<guid type="str">regex-is-fascinating</guid>
		</item>
		<item type="dict">
			<description type="str">**tl;dr**: my flappy clone [here](http://keang.github.io/flappy-quiz/).

Being swept by the recent craze for flappy bird, I wanted to pass on this little birdy frustration and at the same time make something fun. I love the fact that flappy bird is so frustratingly simple that to play you have to focus on some thing else other than the bird to do well. Some people suggesting looking at the skies behind. Some at the moving pipes. Others go further to add a [typing training in there](http://www.mrspeaker.net/dev/game/flappy/).

One interesting version I found was this awesome [flappy maths saga](tikwid/flappy-math-saga) which puts your multiplication power to the test. It's beautiful because the attention split needed there really proves as a good brain teaser. I thought this could extend to other fields as well, so I wanted to make a frustrating quiz engin for multiple choice questions. But the pipe is only so long, so only true/false type questions and 2-choices were possible.

I told this to my girlfriend and she said her english class full of 13yo's will love it. We used google spreadsheet to compile a small quiz, which I was planning to hardcode into the modified html flappy. But while sharing the google spreadsheet I remembered that it could be made a public link, and so there should be a way to read the content of the public spreadsheet directly from the html.

&gt;&quot;The (sec2) kids went bananas!&quot;

Turns out google spreadsheet do have an API, but the documentation is scarce and full of redirects between a few versions. From [this example](https://developers.google.com/gdata/samples/spreadsheet_sample) I figured out how to read the columns of a public spreadsheet, and voila, flappy-quiz just got its sheety backend wired up.

````javascript
	//load questions
	$.getJSON(&quot;http://cors.io/spreadsheets.google.com/feeds/list
		/[google-sheet-uid]/od6/public/basic?alt=json&quot;, function(data) {
    	var rows = data.feed.entry;
    	for(var i=0; i&lt;rows.length; i++) {
        	var t = rows[i].content.$t.split(/[ ,]+/);
        	var question = {word:rows[i].title.$t, correct:t[1], wrong:t[3]};
        	questions.push(question);
		}
		isQuestionLoaded = true;
	});
````


Now anyone with the spreadsheet link(and with permission) can update it, and the flappy bird will have a different problem to solve to go through the pipes!

See it [flapping live here](http://keang.github.io/flappy-quiz/) and if you want to, [fork from here!](http://keang.github.io/flappy-quiz/)</description>
			<pubDate type="str">2014-03-02</pubDate>
			<title type="str">Joining the Flappy craze</title>
			<link type="str">http://yangshun.github.io/luna/#/joining-the-flappy-craze</link>
			<guid type="str">joining-the-flappy-craze</guid>
		</item>
	</channel>
</rss>
